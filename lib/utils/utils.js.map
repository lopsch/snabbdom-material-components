{"version":3,"sources":["../../src/utils/utils.js"],"names":["delayInit","uuid","makeHooks","makeSelector","makeKeyValue","window","getComputedStyle","position","setInterval","clearInterval","_uuid","random","toString","replace","Array","prototype","slice","call","arguments","insert","data","material","postpatch","update","destroy","selector","PropsNormalizer","_classes","_fromClassNames","_fromSwitches","extractedClasses","length","normalizedProps","map","split","classes","props"],"mappings":"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","file":"utils.js","sourcesContent":["import { style as css } from 'typestyle'\nimport { tryFlatten } from 'snabbdom-jsx-pragma'\n\nexport function delayInit (elm, callback, delay = 100) {\n  let pos = window.getComputedStyle(elm).position\n\n  if (pos === 'relative') {\n    callback()\n  } else {\n    let pollId = 0\n\n    pollId = window.setInterval(function poll () {\n      pos = window.getComputedStyle(elm).position\n\n      if (pos === 'relative') {\n        window.clearInterval(pollId)\n        callback()\n      }\n    }, delay)\n  }\n}\n\nexport function uuid () {\n  return _uuid()\n}\n\n/* eslint-disable operator-linebreak */\nfunction _uuid (\n  a // placeholder\n) {\n  return a // if the placeholder was passed, return\n    ? // a random number from 0 to 15\n    (a ^ // unless b is 8,\n        ((Math.random() * // in which case\n          16) >> // a random number from\n          (a / 4))) // 8 to 11\n      .toString(16) // in hexadecimal\n    : // or otherwise a concatenated string:\n    ([1e7] + // 10000000 +\n      -1e3 + // -1000 +\n      -4e3 + // -4000 +\n      -8e3 + // -80000000 +\n        -1e11) // -100000000000,\n      .replace(\n        // replacing\n        /[018]/g, // zeroes, ones, and eights with\n        _uuid // random hex digits\n      )\n}\n\nexport function makeHooks (Adapter) {\n  const hooks = {}\n\n  hooks.insert = function insert (vnode) {\n    const material = new Adapter(vnode)\n    vnode.data.material = material\n  }\n\n  hooks.postpatch = function postpatch (oldVnode, vnode) {\n    vnode.data.material = oldVnode.data.material\n    callHook(vnode.data.material.update, ...arguments)\n  }\n\n  hooks.destroy = function destroy (vnode) {\n    callHook(vnode.data.material.destroy, ...arguments)\n  }\n\n  return hooks\n\n  function callHook (hook) {\n    if (typeof hook === 'function') {\n      hook(...Array.prototype.slice.call(arguments, 1))\n    }\n  }\n}\n\nexport function makeSelector (id) {\n  return id ? { selector: `#${id}` } : {}\n}\n\nexport function makeKeyValue (key, value) {\n  return value ? { [key]: value } : {}\n}\n\nexport class PropsNormalizer {\n  constructor (_props, _switches) {\n    const props = _props || {}\n    const switches = _switches || {}\n\n    const fromClassNames = props['classNames']\n      ? this._classes(this._fromClassNames([props['classNames']]))\n      : {}\n    const fromStyle = props['style']\n      ? this._classes(this._fromClassNames([css(props['style'])]))\n      : {}\n    const fromProps = props['class'] ? props['class'] : {}\n    const fromSwitches = this._fromSwitches(switches, props)\n\n    const _allClasses = [fromClassNames, fromStyle, fromProps, fromSwitches]\n    this.extractedClasses = {}\n\n    for (let i = 0; i < _allClasses.length; i++) {\n      const _classes = _allClasses[i]\n\n      for (let _class in _classes) {\n        this.extractedClasses[_class] = _classes[_class]\n      }\n    }\n\n    this.normalizedProps = props\n    delete this.normalizedProps['classNames']\n    delete this.normalizedProps['style']\n    delete this.normalizedProps['class']\n  }\n\n  get normalized () {\n    return { classes: this.extractedClasses, props: this.normalizedProps }\n  }\n\n  _fromSwitches (switches, props) {\n    const map = {}\n\n    for (let _switch in switches) {\n      map[switches[_switch]] = !!props[_switch]\n    }\n\n    return map\n  }\n\n  _classes (classes) {\n    const map = {}\n\n    for (let i = 0; i < classes.length; i++) {\n      map[classes[i]] = true\n    }\n\n    return map\n  }\n\n  _fromClassNames (classNames) {\n    return tryFlatten(\n      tryFlatten(classNames).map(className =>\n        className.replace(/\\s+/g, '_§§§_').split('_§§§_')\n      )\n    )\n  }\n}\n"]}